#!/usr/bin/env ruby
#
# Yet another parallel ssh wrapper
#

require 'optparse'

$LOAD_PATH.unshift File.join(File.dirname(__FILE__), '..', 'lib')
require 'net/sshr'
require 'net/sshr/formatter'
require 'net/sshr/merger'

$stdout.sync = true

options = { :oe_selector => [] }

# Parse options
op = OptionParser.new
op.banner = "Usage: sshr [options] <host1> [<host2> ...] <cmd>"
op.on('-?', '-h', '--help') do
  puts op
  exit
end
op.on('-l', '--long', "Report long/full command output") do
  options[:fmt] = 'long'
end
op.on('-s', '--short', "Report short command output") do
  options[:fmt] = 'short'
end
#op.on('-f', '--fmt', '--format', String, "Formatter to use for reporting") do |val|
#  options[:fmt] = val
#end
op.on('-m', '--merge', "Merge output before reporting") do
  options[:merge] = true
end
op.on('-o', '--out', '--stdout', "Show only stdout, not stderr") do
  options[:oe_selector].push(:oe_o)
end
op.on('-e', '--err', '--stderr', "Show only stderr, not stdout") do
  options[:oe_selector].push(:oe_e)
end
op.on('-b', '--oeb', '--oe', "Show both stdout and stderr") do
  options[:oe_selector].push(:oe_b)
end
op.on('-x', '--oex', "Show either stdout or stderr, but not both (xor)") do
  options[:oe_selector].push(:oe_x)
end
op.on('--stream', "Annotate stdout and stderr streams to distinguish them") do
  options[:stream] = true
end

begin
  args = op.parse(ARGV)
rescue => e
  puts "Error: " << e
  puts op
  exit
end
if args.length < 2:
  puts "Error: must supply at least two arguments"
  puts op
  exit
end
if options[:oe_selector].length > 1
  puts "Error: multiple stdout/stderr options given"
  puts op
  exit
else
   options[:oe_selector] =  options[:oe_selector][0]
end

cmd = args.pop

trap("INT") { puts; exit }

sshr   = Net::SSHR.new({ :hosts => args })
fmt    = Net::SSHR::Formatter.new(options)
merger = Net::SSHR::Merger.new

# exec cmd on all hosts, reporting results as them come in
sshr.exec(cmd) do |res|
  if options[:merge]:
    merger.merge(res)
  else
    fmt.render(res)
  end
end

# In merge mode, report merged output at end
fmt.render_all(merger) if options[:merge]

