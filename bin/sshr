#!/usr/bin/env ruby
#
# Yet another parallel ssh wrapper
#

require 'optparse'

$LOAD_PATH.unshift File.join(File.dirname(__FILE__), '..', 'lib')
require 'net/sshr'
require 'net/sshr/formatter'
require 'net/sshr/merger'
include Net::SSHR

$stdout.sync = true

options = { :oe_selector => [] }

# Parse options
op = OptionParser.new
op.banner = "Usage: sshr [options] <host1> [<host2> ...] <cmd>"
op.on('-?', '-h', '--help') do
  puts op
  exit
end
op.on('-l', '--long', "Report long/full command output") do
  options[:format] = :long
end
op.on('-s', '--short', "Report short command output (first line only)") do
  options[:format] = :short
end
op.on('-j', '--json',  "Report results as json") do
  options[:format] = :json
end
op.on('-m', '--merge', "Merge output before reporting") do
  options[:merge] = true
end
op.on('-o', '--out', '--stdout', "Show only stdout, not stderr") do
  options[:oe_selector].push(:oe_out)
end
op.on('-e', '--err', '--stderr', "Show only stderr, not stdout") do
  options[:oe_selector].push(:oe_err)
end
op.on('-b', '--oeb', '--oe', "Show both stdout and stderr (default with --long)") do
  options[:oe_selector].push(:oe_both)
end
op.on('-x', '--oex', "Show either stdout or stderr, but not both (xor) (default with --short)") do
  options[:oe_selector].push(:oe_xor)
end
op.on('--stream', "Annotate stdout and stderr streams to distinguish them") do
  options[:annotate_flag] = true
end
#op.on('-f', '--fmt', '--format=FORMATTER', String, "Formatter to use for reporting") do |val|
#  options[:format] = val
#end
op.on('-v', '--verbose', "More verbose output (for debugging)") do
  options[:verbose] = true
  $stderr.sync = true
end

begin
  args = op.parse(ARGV)
rescue => e
  $stderr.puts "Error: " << e
  $stderr.puts op
  exit
end
if args.length < 2:
  $stderr.puts "Error: must supply at least two arguments"
  $stderr.puts op
  exit
end
if options[:oe_selector].length > 1
  $stderr.puts "Error: multiple stdout/stderr options given"
  $stderr.puts op
  exit
else
   options[:oe_selector] =  options[:oe_selector][0]
end

cmd = args.pop

trap("INT") { puts; exit }

fmt    = Net::SSHR::Formatter.new(options[:format], options[:oe_selector], options[:annotate_flag])
merger = Net::SSHR::Merger.new if options[:merge]

# exec cmd on all hosts, reporting results as them come in
$stderr.puts "Running '#{cmd}' on #{args.length} hosts ...\n\n" if options[:verbose]
sshr_exec(args, cmd, { :verbose => options[:verbose] }) do |res|
  if options[:merge]:
    merger.merge(res)
  else
    print fmt.render(res)
  end
end

# In merge mode, report merged output at end
if options[:merge]:
  $stderr.puts "+ execs completed, merging results" if options[:verbose]
  print fmt.render_all(merger) 
end


=begin

= NAME

sshr - an asynchronous ssh wrapper for executing a command on multiple hosts
and collating and presenting command output

= SYNOPSIS

  sshr [options] <host1> [<host2> ...] <cmd>

= DESCRIPTION

sshr is an asynchronous ssh wrapper for executing a command on multiple hosts
and collating and presenting any output and errors from the command.

== OPTIONS

    -l, --long                       Report long/full command output
    -s, --short                      Report short command output (first line only)
    -j, --json                       Report results as json
    -m, --merge                      Merge output before reporting
    -o, --out, --stdout              Show only stdout, not stderr
    -e, --err, --stderr              Show only stderr, not stdout
    -b, --oeb, --oe                  Show both stdout and stderr (default with --long)
    -x, --oex                        Show either stdout or stderr, but not both (xor) (default with --short)
        --stream                     Annotate stdout and stderr streams to distinguish them
    -v, --verbose                    More verbose output (for debugging)

= AUTHOR

Gavin Carr <gavin@openfusion.com.au>

= COPYRIGHT

Copyright 2010 by Gavin Carr.

This library is free software; you can redistribute it and/or modify it under the same 
terms as ruby (see COPYING for details).

=end

