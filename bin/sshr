#!/usr/bin/env ruby
#
# Yet another parallel ssh wrapper
#

require 'optparse'

$LOAD_PATH.unshift File.join(File.dirname(__FILE__), '..', 'lib')
require 'net/sshr'
require 'net/sshr/formatter'
require 'net/sshr/merger'
include Net::SSHR

$stdout.sync = true

options = { :format => [], :oe_selector => [] }

# Parse options
op = OptionParser.new
op.banner = "Usage: sshr [options] <host1> [<host2> ...] <cmd_args_string>\n" +
            "       sshr [options] <host1> [<host2> ...] -- <cmd> [<arg1> <arg2> ...]"
op.on('-?', '--help') do
  puts op
  exit
end
op.on('-u', '--user=USER', String, "Default user for ssh connections") do |user|
  options[:user] = user
end
op.on('-t', '--pty', "Request pseudo-tty allocation on ssh channels") do
  options[:request_pty] = true
end
op.on('-s', '--short', "Report short command output (first line only)") do
  options[:format].push(:short)
end
op.on('-l', '--long', "Report long/full command output") do
  options[:format].push(:long)
end
op.on('-j', '--json',  "Report results as json") do
  options[:format].push(:json)
end
op.on('-L', '--list', "Report hosts that produce output (and nothing else)") do
  options[:format].push(:list)
end
op.on('-m', '--merge', "Merge output before reporting") do
  options[:merge] = true
end
op.on('-o', '--out', '--stdout', "Show only stdout, not stderr") do
  options[:oe_selector].push(:oe_out)
end
op.on('-e', '--err', '--stderr', "Show only stderr, not stdout") do
  options[:oe_selector].push(:oe_err)
end
op.on('-b', '--oeb', '--oe', "Show both stdout and stderr (default with --long)") do
  options[:oe_selector].push(:oe_both)
end
op.on('-x', '--oex', "Show either stdout or stderr, but not both (xor) (default with --short)") do
  options[:oe_selector].push(:oe_xor)
end
op.on('-H', '--show-hostname', "Show hostname with output (e.g. with --short)") do
  options[:show_hostname] = true
end
op.on('-h', '--no-hostname', "Omit hostname from output (e.g. with --long)") do
  options[:show_hostname] = false
end
op.on('--stream', "Annotate stdout and stderr streams to distinguish them") do
  options[:annotate_flag] = true
end
op.on('-q', '--quiet', "Omit hosts that don't produce any output") do 
  options[:quiet] = true
end
op.on('-v', '--verbose', "More verbose output (for debugging)") do
  options[:verbose] = true
  $stderr.sync = true
end

begin
  args = op.order(ARGV)
rescue => e
  $stderr.puts "Error: " << e
  $stderr.puts op
  exit
end
if args.length < 2:
  $stderr.puts "Error: must supply at least two arguments"
  $stderr.puts op
  exit
end
if options[:format].length > 1
  $stderr.puts "Error: only one format option may be specified (--short|--long|--json|--list)"
  $stderr.puts op
  exit
else
   options[:format] =  options[:format][0]
end
if options[:oe_selector].length > 1
  $stderr.puts "Error: only one stdout/stderr option may be specified (--out|--err|--oeb|--oex)"
  $stderr.puts op
  exit
else
   options[:oe_selector] =  options[:oe_selector][0]
end

# Check for -- hosts-cmd separator
hosts = nil
cmd = nil
0.upto(args.length-1) do |i|
  if args[i] == '--'
    hosts = args[0, i]
    cmd = args[i+1, args.length-(i+1)].join(' ')
    break
  end
end
cmd ||= args.pop
hosts ||= args

trap("INT") { puts; exit }

fmt    = Net::SSHR::Formatter.new({ :format             => options[:format],
                                    :out_err_selector   => options[:oe_selector],
                                    :show_hostname      => options[:show_hostname],
                                    :quiet              => options[:quiet],
                                    :annotate_flag      => options[:annotate_flag],
                                    :host_count         => hosts.length,
                                  })
merger = Net::SSHR::Merger.new if options[:merge]

# exec cmd on all hosts, reporting results as them come in
$stderr.puts "Running '#{cmd}' on #{hosts.length} hosts ...\n\n" if options[:verbose]
sshr_exec_options = {
  :default_user => options[:user],
  :request_pty => options[:request_pty],
  :verbose => options[:verbose],
}
sshr_exec(hosts, cmd, sshr_exec_options) do |res|
  if options[:merge]:
    merger.merge(res)
  else
    print fmt.render(res)
  end
end

# In merge mode, report merged output at end
if options[:merge]:
  $stderr.puts "+ execs completed, merging results" if options[:verbose]
  print fmt.render_all(merger) 
end


=begin

= NAME

sshr - an asynchronous ssh wrapper for executing a command on multiple hosts
and collating and presenting the output

= SYNOPSIS

  sshr [options] <host1> [<host2> ...] <cmd_args_string>
  sshr [options] <host1> [<host2> ...] -- <cmd> [<arg1> <arg2> ...]

= DESCRIPTION

sshr is an asynchronous ssh wrapper for executing a command on multiple hosts
and collating and presenting any output and/or errors.

Four output formats are currently supported: 

Short format (-s|--short) reports only the hostname and the first line of stdout
(or stderr if no stdout), discarding any extra output. The output is in the form:

  hostname:             output

Long format (-l|--long) reports all command output for each host, and by default
both stdout and stderr streams. The output is the form:

  [hostname]
  stdout_output

  stderr_output

Json format (-j|--json) reports command results as a json hash with the following
keys: host_string (i.e. user@hostname, if given), host, user, exit_code, stdout,
stderr, and json_class ('Net::SSHR::Result').

List format (-L|--list) reports a list of hostnames that produced stdout command 
output (analagous to 'grep -l').


== OPTIONS

    -u, --user=USER                  Default user for ssh connections
    -t, --pty                        Request pseudo-tty allocation on ssh channels
    -s, --short                      Report short command output (first line only)
    -l, --long                       Report long/full command output
    -j, --json                       Report results as json
    -L, --list                       Report hosts that produce output (and nothing else)
    -m, --merge                      Merge output before reporting
    -o, --out, --stdout              Show only stdout, not stderr
    -e, --err, --stderr              Show only stderr, not stdout
    -b, --oeb, --oe                  Show both stdout and stderr (default with --long)
    -x, --oex                        Show either stdout or stderr, but not both (xor) (default with --short)
    -H, --show-hostname              Show hostname with output
    -h, --no-hostname                Omit hostname from output
        --stream                     Annotate stdout and stderr streams to distinguish them
    -q, --quiet                      Omit hosts that don't produce any output
    -v, --verbose                    More verbose output (for debugging)

= AUTHOR

Gavin Carr <gavin@openfusion.com.au>

= COPYRIGHT

Copyright 2010 by Gavin Carr.

This library is free software; you can redistribute it and/or modify it under the
same terms as ruby (see COPYING for details).

=end

